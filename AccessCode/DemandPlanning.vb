Option Compare Database
Option Explicit

Public Sub DynRS(sQName As String, dStart As Date, dEnd As Date, sUSA As String, sNETH As String) ' As DAO.Recordset
'========================================================================================================================
'Description    : This will return a record set from two combined Cross Tab queries
'Parameters     : Query_Defenition, Query_Defenitio,Start Date,End Date, Country
'========================================================================================================================
  Dim RS As DAO.Recordset
  Dim objQD As QueryDef
  Dim sSQL$, sSQL1$, sSQL2$, sGroup$
  Dim i%, Diff%

On Error GoTo ProcErr

'Turn on hour glass
  DoCmd.Hourglass True
  
'Get number of Months
  Diff = DateDiff("m", dStart, dEnd)

'This the main SQL statement that takes the -------------
  sSQL = "SELECT [" & sQName & "].[DevCode], [" & sQName & "].[Style], [" & sQName & "].[Color], " & sQName & ".[Model_Name], "
  sSQL = sSQL & sQName & ".Product_Line, " & sQName & ".Product_Line_Desc, " & sQName & ".Product_Cat, " & sQName & ".Product_Cat_Desc, " & sQName & ".Type_CD, " & sQName & ".Type_Desc, " & sQName & ".Style_Group, "
  sSQL = sSQL & sQName & ".[Total_CurrentDemand], " & sQName & ".[Total_PreviousDemand], [Total_CurrentDemand]-[Total_PreviousDemand] AS Total_Variance, Abs([Total_CurrentDemand]-[Total_PreviousDemand]) AS Total_ABS, "
  sSQL = sSQL & FldSQL(sQName, dStart, dEnd)
  sSQL = sSQL & "FROM " & sQName & " "
  sSQL = sSQL & "ORDER BY [" & sQName & "].[DevCode], [" & sQName & "].[Style], [" & sQName & "].[Color], [" & sQName & "].Product_Line, [" & sQName & "].Product_Cat;"
    
'Create Temporary QueryDef
  'CurrentDb.QueryDefs("q_Global_Report*").SQL = sSQL
  Set objQD = CurrentDb.CreateQueryDef("", sSQL)
  
'====================================================================================================================================================
'This will find extra parameters generated by SQL field name that don't exist
'in the Query Def that was passed to this function
'  MsgBox objQD.Parameters.Count
'
'  For i = 0 To objQD.Parameters.Count - 1
'    MsgBox objQD.Parameters(i).Name
'  Next i
'====================================================================================================================================================
 
  objQD.Parameters("dStart").Value = dStart
  objQD.Parameters("dEnd").Value = dEnd
  objQD.Parameters("sUSA").Value = sUSA
  objQD.Parameters("sNETH").Value = sNETH
  
'Note recordset needs to be dbReadOnly to get record count
  Set RS = objQD.OpenRecordset(dbReadOnly)
   
'Run function to create spread sheet
  RecordSetToNewSheet_Curr_vs_Prev RS, dStart, dEnd, sUSA

ProcExit:
  objQD.Close
  Set RS = Nothing
  Set objQD = Nothing
  DoCmd.Hourglass False
  
Exit Sub
  
ProcErr:
  DoCmd.Hourglass False
  Select Case Err.Number
    Case 3012
        Resume Next
        MsgBox Err.Description
    Case 3075
        MsgBox Err.Description
    Case 3151
        If MsgBox("Wrong PassWord !" & vbCrLf & "Click on Yes to re-enter Password or No to Exit", vbYesNo + vbCritical) = vbYes Then
            Resume
        Else
            Resume ProcExit
        End If
    Case Else
        MsgBox Err.Description & " The error # is " & Err.Number & " The source " & Err.Source, vbCritical
        Stop
        Resume Next
  End Select
Resume ProcExit

End Sub

Public Function DynCountryRS(sQName As String, sCountry As String, dStart As Date, dEnd As Date) ' As DAO.Recordset
  Dim RS As DAO.Recordset
  Dim objQD As QueryDef, QDName As QueryDef
  Dim sSQL$, sSQL1$, sSQL2$, sGroup$
  Dim i%, Diff%

On Error GoTo ProcErr

'Turn on hour glass
  DoCmd.Hourglass True
  
'Get number of Months
  Diff = DateDiff("m", dStart, dEnd)
  
'Create Dynamic Groups
  For i = 0 To Diff
    sGroup = sGroup & "[" & sQName & "].[Curr_DM_" & Format(DateAdd("m", i, dStart), "mmm_yyyy") & "], " & _
            "[" & sQName & "].[Prev_DM_" & Format(DateAdd("m", i, dStart), "mmm_yyyy") & "] "
    If i < Diff Then
        sGroup = sGroup & ", "
    End If
  Next i
  
'This the main SQL statement that takes the -------------
  sSQL = "SELECT q_Country_CrstCombine.Country, [" & sQName & "].[DevCode], [" & sQName & "].[Style], [" & sQName & "].[Color], " & sQName & ".[Model_Name], "
  sSQL = sSQL & sQName & ".Product_Line, " & sQName & ".Product_Line_Desc, " & sQName & ".Product_Cat, " & sQName & ".Product_Cat_Desc, " & sQName & ".Type_CD, " & sQName & ".Type_Desc, " & sQName & ".Style_Group, "
  sSQL = sSQL & sQName & ".[Total_CurrentDemand], " & sQName & ".[Total_PreviousDemand], [Total_CurrentDemand]-[Total_PreviousDemand] AS Total_Variance, Abs([Total_CurrentDemand]-[Total_PreviousDemand]) AS Total_ABS, "
  sSQL = sSQL & FldSQL(sQName, dStart, dEnd)
  sSQL = sSQL & "FROM " & sQName & " "
  sSQL = sSQL & "ORDER BY [" & sQName & "].[DevCode], [" & sQName & "].[Style], [" & sQName & "].[Color], [" & sQName & "].Product_Line, [" & sQName & "].Product_Cat;"
  
'Create Temporary QueryDef
  'CurrentDb.QueryDefs("q_Country_Report*").SQL = sSQL
  Set objQD = CurrentDb.CreateQueryDef("", sSQL)

  
'====================================================================================================================================================
'This will find extra parameters generated by SQL field name that don't exist
'in the Query Def that was passed to this function
'  MsgBox objQD.Parameters.Count
'
'  For i = 0 To objQD.Parameters.Count - 1
'    MsgBox objQD.Parameters(i).Name
'  Next i
'====================================================================================================================================================

  objQD.Parameters("dStart").Value = dStart
  objQD.Parameters("dEnd").Value = dEnd
  objQD.Parameters("sCountry").Value = sCountry

'Note recordset needs to be dbReadOnly to get record count
  Set RS = objQD.OpenRecordset(dbReadOnly)
  
'Run function to create spread sheet
  RecordSetToNewSheet_Curr_vs_Prev RS, dStart, dEnd, "No"

ProcExit:
  objQD.Close
  Set RS = Nothing
  Set objQD = Nothing
  DoCmd.Hourglass False
  
Exit Function
  
ProcErr:
  DoCmd.Hourglass False
  Select Case Err.Number
    Case 3012
        Resume Next
        MsgBox Err.Description
    Case 3075
        MsgBox Err.Description
    Case 3151
        If MsgBox("Wrong PassWord !" & vbCrLf & "Click on Yes to re-enter Password or No to Exit", vbYesNo + vbCritical) = vbYes Then
            Resume
        Else
            Resume ProcExit
        End If
    Case Else
        MsgBox Err.Description & " The error # is " & Err.Number & " The source " & Err.Source, vbCritical
        Stop
        Resume Next
  End Select
Resume ProcExit

End Function

Private Function FldSQL(sQName As String, dStart As Date, dEnd As Date) As String
'This function generates an SQL statement to create N number of fields for query based on a cross tab query
'For example: Dates entered 6/2001 and 9/2001 will create 4 fields
  Dim sSQL$
  Dim Diff%, i%
  
'Create Dynamic Headers for Cross Tab Queries
  HeaderSQL sQName, dStart, dEnd
    
'Add fields for each month
  Diff = DateDiff("m", dStart, dEnd)
    
  For i = 0 To Diff
    sSQL = sSQL & "[" & sQName & "].[Curr_DM_" & Format(DateAdd("m", i, dStart), "mmm_yyyy") & "], " & _
                  "[" & sQName & "].[Prev_DM_" & Format(DateAdd("m", i, dStart), "mmm_yyyy") & "], " & _
                  "[Curr_DM_" & Format(DateAdd("m", i, dStart), "mmm_yyyy") & "]-[Prev_DM_" & Format(DateAdd("m", i, dStart), "mmm_yyyy") & "] AS " & Format(DateAdd("m", i, dStart), "mmm") & "_Variance, " & _
                  "ABS([Curr_DM_" & Format(DateAdd("m", i, dStart), "mmm_yyyy") & "]-[Prev_DM_" & Format(DateAdd("m", i, dStart), "mmm_yyyy") & "]) AS " & Format(DateAdd("m", i, dStart), "mmm") & "_ABS "
       If i < Diff Then
            sSQL = sSQL & ", "
       End If
  Next i

  FldSQL = sSQL
 
End Function

Private Sub HeaderSQL(sQName As String, dStart As Date, dEnd As Date)
'Create the Column Headings for the Crosstab query. This is needed for
'the report, in case dates are used and no columns created. Otherwise a
'binding error occurs.

  Dim sTemp$
  Dim Diff%, i%
  Dim objQD As QueryDef
  
On Error GoTo ProcErr
    
  Diff = DateDiff("m", dStart, dEnd)
  
'Create Header for Current Demand
    For i = 0 To Diff
        sTemp = sTemp & "'Curr_DM_" & Format(DateAdd("m", i, dStart), "mmm_yyyy") & "',"
      'Note you don't need to use the if statement when creating the string before another string
    Next i
    
'Create Header for Previous Demand
    For i = 0 To Diff
        sTemp = sTemp & "'Prev_DM_" & Format(DateAdd("m", i, dStart), "mmm_yyyy") & "'"
        If i < Diff Then
            sTemp = sTemp & ","
        End If
    Next i

'Open the Crosstab querydef and add/replace the column headings.
  Set objQD = CurrentDb.QueryDefs(sQName)

  'Add in to SQL string if it isn't already in the query
  If InStr(objQD.SQL, " In ") > 0 Then
    objQD.SQL = Left(objQD.SQL, InStr(objQD.SQL, " In ") - 1) _
                    & " In (" & sTemp & ");"
  Else
    objQD.SQL = Left(objQD.SQL, Len(objQD.SQL) - 3) _
                    & " In (" & sTemp & ");"
  End If

ProcExit:
  objQD.Close
  Set objQD = Nothing
Exit Sub

ProcErr:
  DoCmd.Hourglass False
  'Screen.MousePointer 0
  Select Case Err.Number
    Case Else
        MsgBox Err.Description & " The error # is " & Err.Number & " The source " & Err.Source, vbCritical
        Stop
        Resume Next
  End Select
Resume ProcExit

End Sub

Private Sub RecordSetToNewSheet_Curr_vs_Prev(RS As Recordset, dStart As Date, dEnd As Date, O_Region As String)
  Dim FirstCountry$
  Dim LastCountry$

On Error GoTo ProcErr

'dimension variables
  Dim intRow As Integer
  Dim sSheetName As String
  
'object variables
  Dim objXL As Excel.Application
  Dim objBook As Excel.Workbook
  Dim objSheet As Excel.Worksheet

DoCmd.Hourglass True

'If there records returned 0 then exit
  If RS.RecordCount = 0 Then
    MsgBox "There are no submissions for the criteria", vbCritical, "Nothing to display"
  Else
  
  'on error go to next line
    On Error Resume Next
     
  'attempt to reference Excel which is already running.
    Set objXL = GetObject(, "Excel.Application")
          
  'if true, Excel is not running.
    If objXL Is Nothing Then
        ' Create a new instance of the Excel application.
        Set objXL = New Excel.Application
        ' If true, MS Excel is not installed.
        If objXL Is Nothing Then
            MsgBox "MS Excel is not installed on your computer"
            Resume ProcExit
        End If
    End If
  
  'turn back on error handler
    On Error GoTo ProcErr
 
'Open a new Excel workbook. Set to template for DP_Comparisons
'Get the first name of the first field, if the name is "DevCode" then use the Global Comparison spreadsheet template if not use the Country
  If RS.Fields(0).Name = "DevCode" Then
    Set objBook = objXL.Workbooks.Open("\\BEAVERTN-SVR-65\FTWRINTGPLN\GF_Rpting\Report Templates\NNDP_Comparison_Global.xlt")
    If O_Region = "USA" Then
        sSheetName = "Other_Region-"
    Else
        sSheetName = "Global-"
    End If
  Else
    Set objBook = objXL.Workbooks.Open("\\BEAVERTN-SVR-65\FTWRINTGPLN\GF_Rpting\Report Templates\NNDP_Comparison_Country.xlt")
    
    RS.MoveFirst
    FirstCountry = Trim(RS(0).Value)
    RS.MoveLast
    LastCountry = Trim(RS(0).Value)
    
    If FirstCountry = LastCountry Then
        RS.MoveFirst
        sSheetName = Trim(RS(0).Value) & "-"
    Else
        sSheetName = "ALL_Countries-"
    End If
  End If

  'set object variable to first worksheet.
    Set objSheet = objBook.Worksheets(1)

  'use the CopyFromRecordset method insert the recordset of data in the
  'worksheet. This is much faster than looping through a recordset
  '********************************************************************************************************************
    objSheet.Range("A3").CopyFromRecordset RS
    '********************************************************************************************************************
  If LastCountry = FirstCountry And LastCountry = "USA" Then
    Select Case Month(dStart) & Month(dEnd)
    'USA_USA
    Case 15
            objSheet.Name = sSheetName & "Spring_USA"
    Case 69
            objSheet.Name = sSheetName & "Fall_USA"
    Case 1012
            objSheet.Name = sSheetName & "Holiday_USA"
    'USA_Global
    Case 25
            objSheet.Name = sSheetName & "Spring_Global"
    Case 69
        objSheet.Name = sSheetName & "Fall_Global"
    Case 101
        objSheet.Name = sSheetName & "Holiday_Global"
    Case Else
        objSheet.Name = Left(sSheetName, 15) & Format(dStart, "mmm_yy") & " to " & Format(dEnd, "mmm_yy")
    End Select
   Else
   
    Select Case Month(dStart) & Month(dEnd)
    Case 25
        objSheet.Name = sSheetName & "Spring"
    Case 69
        objSheet.Name = sSheetName & "Fall"
    Case 101
        objSheet.Name = sSheetName & "Holiday"
    Case Else
      objSheet.Name = Left(sSheetName, 15) & Format(dStart, "mmm_yy") & " to " & Format(dEnd, "mmm_yy")
    End Select
   End If

  'Formant Excel so columns fit to one page and the database name is listed. Add one to record count to include column headings
    FormatCurrentPreviousExcel objSheet, dStart, dEnd, RS.RecordCount, RS.Fields.Count
    
  'make the application visible.
    objXL.Visible = True
      
  End If

ProcExit:
  RS.Close
  DoCmd.Hourglass False
  Set objSheet = Nothing
  Set objBook = Nothing
  Set objXL = Nothing
  Set RS = Nothing
  Exit Sub

ProcErr:
  DoCmd.Hourglass False
  Select Case Err.Number
    Case 462 'Excel Conflict
      RS.Close
      Set objSheet = Nothing
      Set objBook = Nothing
      Set objXL = Nothing
      Set RS = Nothing
      MsgBox "You must now Exit Access. Click on OK below to exit.", vbExclamation
      DoCmd.Quit
     
    Case Else
        MsgBox Err.Description & " The error # is " & Err.Number & " The source " & Err.Source, vbCritical
        Stop
        Resume Next
  End Select
  Resume ProcExit
  
End Sub

Private Sub FormatCurrentPreviousExcel(objSheet As Excel.Worksheet, dStart As Date, dEnd As Date, NRows As Long, NColumns As Long)
'This formats the excel Spreadsheet Country to global
 Dim sTemp1$, sDatabaseName$, HeaderN$
 Dim i&, CurrentC&, IdxR&, LastR&, TotalR&
 Dim CntryC%, NextMonthC%, FirstFormatC%, LastTempC%
 Dim CWidth!

'This adjusts the spreadsheet when country is selected. It adds 1 to the column count
'from the recordset
 If Left(objSheet.Name, 7) = "Global-" Or Left(objSheet.Name, 7) = "Other_R" Then
    CntryC = 0
  Else
    CntryC = 1
 End If

'Variables
 LastR = NRows + 2              'is the last row of data
 TotalR = NRows + 3             'row that has the totals formula for the data rows
 NextMonthC = 4                 'number of columns to add to get to next month data group
 FirstFormatC = 12 + CntryC      'column which the formatting begins for numeric data
 LastTempC = 63 + CntryC        'last column with formating on the DP_Comparision template
  
On Error GoTo ProcErr
 
   objSheet.Select

'Format sheet properties
   With objSheet.PageSetup
      .LeftFooter = "&8 " & CurrentDb.Name
      .LeftHeader = "&18 &F"
      .RightFooter = "&10 &P of &N"
      .RightHeader = "&10 &D &T"
      .Orientation = xlLandscape
      .LeftMargin = 0
      .RightMargin = 0
      .TopMargin = 36
      .BottomMargin = 36
      .HeaderMargin = 0
      .FooterMargin = 0
      .PrintTitleRows = "$1:$1"
   End With

'Format sheet using Autofill on formats already in DP_Comparision Template
  With objSheet.Range(Cells(4, 1), Cells(4, NColumns))
       .AutoFill Destination:=Range(Cells(4, 1), Cells(LastR, NColumns)), Type:=xlFillFormats
  End With
  
'Enter Month and Year name for titles of four columns sets
  For i = 0 To DateDiff("m", dStart, dEnd)
    'Calculate first column header to enter season date
      If i = 0 Then
      CurrentC = FirstFormatC + NextMonthC
      Else
      CurrentC = CurrentC + NextMonthC
      End If
    'Enter the date in the cell
      objSheet.Range(Cells(1, CurrentC), Cells(1, CurrentC)).Value = Format(DateAdd("m", i, dStart), "mmmm yyyy")
  Next i
     
'Clear extra formated columns
    objSheet.Range(Cells(1, NColumns + 1), Cells(TotalR, LastTempC + 1)).Delete
    
'Add subtotals to sheet after last row
  With objSheet.Range(Cells(TotalR, FirstFormatC), Cells(TotalR, FirstFormatC))
    .FormulaR1C1 = "=SUM(R[-" & CStr(LastR) & "]C:R[-1]C)"
    .AutoFill Destination:=Range(Cells(TotalR, FirstFormatC), Cells(TotalR, NColumns)), Type:=xlFillDefault
  End With

'Format Subtotals
  With objSheet.Range(Cells(TotalR, FirstFormatC), Cells(TotalR, NColumns))
        .NumberFormat = "#,##0"
  End With
  
  With objSheet.Range(Cells(TotalR, FirstFormatC), Cells(TotalR, NColumns)).Font
    .Name = "Arial"
    .Size = 12
  End With
  
  With objSheet.Range(Cells(TotalR, 1), Cells(TotalR, NColumns)).Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlMedium
  End With
 
'Formats bottom line of last row
  With objSheet.Range(Cells(TotalR, 1), Cells(TotalR, FirstFormatC - 1)).Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
  End With
  
'Set cell to start
  objSheet.Range("D4").Select
 
ProcExit:
  DoCmd.Hourglass False
  Set objSheet = Nothing

Exit Sub

ProcErr:
  objSheet.Visible = xlSheetVisible
  DoCmd.Hourglass False
  Select Case Err.Number
    Case 1004 'Excel isn't closed
       MsgBox " Note: Don't hit OK until you do the following below! " & vbCrLf & _
                "1. You must close all open Excel Spreadsheets." & vbCrLf & _
                "2. Hit Ctrl+Alt+Delete to get Task Manager, then Click on Task Manager Button " & vbCrLf & _
                "3. Select the Processes tab and Click on the Imgage Name bar to sort by Image Name" & vbCrLf & _
                "4. Look for EXCEL.EXE under Image name, then select EXCEL.EXE. " & vbCrLf & _
                "5. Click on the End Process button at the bottom right hand corner" & vbCrLf & _
                "6. If, EXCEL.EXE still shows, then select it and hit End Process button again.", vbOKCancel + vbExclamation
      If MsgBox("Have you gone through the 6 steps to close out Excel?", vbYesNo + vbInformation) = vbNo Then
        Resume
      End If
        Resume Next
        
    Case 462 'Excel error
      Resume ProcExit
    Case Else
        MsgBox Err.Description & " The error # is " & Err.Number & " The source " & Err.Source, vbCritical
        Stop
        Resume Next
  End Select
  Resume ProcExit
End Sub

Public Sub ADO_ParameterQ()
'This sub creates a paramter query in ADO from PROD_GFP_DM_DP_SUBMIT_VAR and generates a recordset
  Dim Cat As New ADOX.Catalog
  Dim Cmd As New ADODB.Command
  Dim Conn As New ADODB.Connection
  Dim RS As New ADODB.Recordset
  Dim sSQL$, sAddSQL$

'Allows the end user to select Global or USA
  If MsgBox("Global or USA", vbYesNo) = vbYes Then
        sAddSQL = ") ;"
    Else
        sAddSQL = " AND ((PROD_GFP_DM_DP_SUBMIT_VAR.DEMAND_COUNTRY)= 'USA'));"
  End If
    
'Hourglass ON
  DoCmd.Hourglass True
  
'SQL with Parameters
'NOTE: You create the paramters in the SQL NOT with the Command Object
  sSQL = "PARAMETERS dBegin DateTime, dEnd DateTime;" & _
         "SELECT Sum(PROD_GFP_DM_DP_SUBMIT_VAR.NNDP_CURR_QTY) AS SumOfNNDP_CURR_QTY, " & _
         "Sum(PROD_GFP_DM_DP_SUBMIT_VAR.NNDP_PREV_QTY) AS SumOfNNDP_PREV_QTY " & _
         "FROM PROD_GFP_DM_DP_SUBMIT_VAR " & _
         "WHERE (((PROD_GFP_DM_DP_SUBMIT_VAR.BUY_MONTH) Between [dBegin] And [dEnd])" & sAddSQL

'Set the connection
  Cat.ActiveConnection = CurrentProject.Connection

''Creates the Query Def by setting the SQL to the command object, then the command object is set to the procedure
''in the Append method
'  Cmd.CommandText = sSQL
'  Cat.Procedures.Append "q_Test_ADO", Cmd
  
'Sets Query Def q_Test_ADO to command object
  Set Cmd = Cat.Procedures("q_Test_ADO").Command
  Cmd.CommandText = sSQL
  
'Modifies the Query Def by setting the procedure's command to the current command text
  Set Cat.Procedures("q_Test_ADO").Command = Cmd
  
  Cmd.Parameters("dBegin").Value = CDate(InputBox("Enter Start Date", Date))
  Cmd.Parameters("dEnd").Value = CDate(InputBox("Enter End Date", Date))

'Note The Open recordset method doesn't requireadCmdStoreProc when procedure is used in the command object for the recordset
  RS.Open Cmd, , adOpenStatic, adLockReadOnly, adCmdStoredProc
 
'Hourglass OFF
  DoCmd.Hourglass False

'Show the total current and previous
  MsgBox "Current Qty    Previous Qty" & vbCrLf & Format(RS(0).Value, "#,##0") & "   " & Format(RS(1).Value, "#,##0")
   
'This will show the connection string Attributes
  Set Conn = Cat.ActiveConnection
  MsgBox "Attributes " & Conn.Attributes & vbCrLf & " Provider " & Conn.Provider
      
''This will show the SQL for the Command Object
'  MsgBox Cmd.CommandText
 
'This will show the SQL for the Procedure
' MsgBox Cat.Procedures("q_Test_ADO")

   RS.Close
   Set RS = Nothing
   Set Cat = Nothing
   Set Cmd = Nothing
  
End Sub

Public Sub Connect_to_Oracle()
  Dim Conn As New ADODB.Connection
  Dim RS As New ADODB.Recordset
  Dim sConnOrc$, sSQL$
  
  sSQL = " SELECT DISTINCT A.DEV_CD , A.STYLE , A.CLR, SUM(A.NNDP_CURR_QTY) , SUM(A.NNDP_PREV_QTY)" & _
         " FROM GFP_DM.DP_SUBMIT_VAR A" & _
         " WHERE(A.BUY_MONTH Between '01-OCT-01' AND '01-JAN-02')" & _
         " GROUP BY A.DEV_CD, A.STYLE, A.CLR"

'NOTE: Connecting this way will allow you to use the Docmd.HourGlass
  With Conn
    .Provider = "MSDAORA" 'Note Use "MSDAORA" instead of "OraOLEDB.Oracle.1"
    .Properties("Data Source") = "ceimoprd"
    .Properties("Prompt") = adPromptAlways '.Properties("User ID")  .Properties("Password")
    .Properties("Persist Security Info") = True
  End With

  DoCmd.Hourglass True
  
  Conn.CursorLocation = adUseClient
  Conn.Open
 
  RS.Open sSQL, Conn, adOpenForwardOnly, adLockOptimistic
  MsgBox RS.RecordCount

  DoCmd.Hourglass False
  Conn.Close

  Set Conn = Nothing
  Set RS = Nothing

End Sub
